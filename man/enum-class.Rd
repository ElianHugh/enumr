% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enum-class.r
\name{enum-class}
\alias{enum-class}
\alias{numeric_enum}
\alias{generic_enum}
\title{\code{enum} class}
\description{
The \code{enum} class is inspired by enumerated types in other languages,
and draws much of its functionality from the primitive list class.

Generally, enums are more restrictive than lists, with the intent of
promoting self-documenting code. They do not allow duplicate values
or names, nor do they allow enum values to be changed later.

In essence, an enum can be thought of as a dictionary of values, which
can be referenced later down the road with the assurance that the related
value will \emph{never} change.

The enum class is the parent of numeric and generic enums, and will always
exist alongside one of the child classes. Which child class an enum will
inherit is (generally) decided at run time.

See the \href{https://elianhugh.github.io/enumr/index.html}{pkgdown site} for
more information.
}
\section{Generic Enums}{


Generic enums have:
\itemize{
\item Class attribute of \code{enum} and \code{generic_enum}
\item Unique name/value pairs
\item Explicitly defined values
\item Any type of value
}
}

\section{Numeric Enums}{


Numeric enums have:
\itemize{
\item Class attribute of \code{enum} and \code{numeric_enum}
\item Unique name/value pairss
\item Either explicit or implicitly defined values
\item All numeric values
}

Implicit values are created when a name is passed to the enum constructor
without a value associated with it. The constructor will then assign the name
a value, which is either:
\itemize{
\item Plus one to the previous index's value
\item The index of the name
}
}

\section{How enums differ from lists}{
\tabular{lcc}{
    \tab List \tab Enum \cr
   Primitive \tab ☑ \tab x \cr
   Static \tab x \tab ☑ \cr
   Allow duplicate names \tab ☑ \tab x \cr
   Allow duplicate values \tab ☑ \tab x \cr
   Allow values without names \tab ☑ \tab x \cr
   Implicit definition \tab x \tab ☑(Numeric enums) \cr
}
}

\seealso{
\code{\link[=enum]{enum()}}, \code{\link[=as_enum]{as_enum()}}, \code{\link[=print.enum]{print.enum()}}
}
